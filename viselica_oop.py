import random


class Gallows:
    def __init__(self, max_lives):
        self.max_lives = max_lives
        self.lives = 0
        self.stages = [
            """
             ------
              |    
              |
              |
              |
              |
            ----------
            """,
            """
             ------
              |    |
              |
              |
              |
              |
            ----------
            """,
            """
             ------
              |    |
              |    0
              |
              |
              |
            ----------
            """,
            """
             ------
              |    |
              |    0
              |    |
              | 
              |      
            ----------
            """,
            """
             ------
              |    |
              |    0
              |   /|
              |   
              |     
            ----------
            """,
            """
             ------
              |    |
              |    0
              |   /|\\
              |   
              |       
            ----------
            """,
            """
             ------
              |    |
              |    0
              |   /|\\
              |   /
              |     
            ----------
            """,
            """
             ------
              |    |
              |    0
              |   /|\\
              |   / \\
              |    
            ----------
            """
        ]

    def lose_life(self):
        self.lives += 1

    def is_alive(self):
        return self.lives < self.max_lives

    def display(self):
        return self.stages[self.lives]


class WordSelector:
    def __init__(self, word_dict):
        self.word_dict = word_dict

    def select_word(self):
        print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑: –∂–∏–≤–æ—Ç–Ω—ã–µ (1), –ø—Ä–æ–¥—É–∫—Ç—ã (2), —Ñ—Ä—É–∫—Ç—ã (3), —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (4), —Ü–≤–µ—Ç–∞ (5)")
        categ = input()
        levels = ['light', 'middle', 'hard']
        categs = ['–∂–∏–≤–æ—Ç–Ω—ã–µ', '–ø—Ä–æ–¥—É–∫—Ç—ã', '—Ñ—Ä—É–∫—Ç—ã', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ü–≤–µ—Ç–∞']
        if not categ.isdigit() or int(categ) < 1 or int(categ) > 5:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∂–∏–≤–æ—Ç–Ω—ã–µ.")
            categ = 1
        else:
            categ = int(categ)

        print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: light (1), middle (2), hard (3)")
        level = input()
        if not level.isdigit() or int(level) < 1 or int(level) > 3:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –í—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: light.")
            level = 1
        else:
            level = int(level)

        word_list = self.word_dict[categ - 1]
        word_list.sort(key=lambda word: (len(word), word))
        words = word_list[(level - 1) * 3: level * 3]
        word = random.choice(words)
        print(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {categs[categ - 1]}")
        print(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {levels[level - 1]}")
        return word


class HangmanGame:
    def __init__(self, word_dict):
        self.word_selector = WordSelector(word_dict)
        self.word = ""
        self.guessed_word = []
        self.attempts = 0
        self.gallows = None
        self.used_letters = set()

    def start_game(self):
        self.word = self.word_selector.select_word()
        self.guessed_word = ["_"] * len(self.word)
        self.attempts = len(self.word) + len(self.word) // 3
        self.gallows = Gallows(7)
        self.used_letters.clear()
        self.run_game()

    def run_game(self):
        while self.gallows.is_alive() and "_" in self.guessed_word and self.attempts > 0:
            print(self.gallows.display())
            print("–¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ: ", ' '.join(self.guessed_word))
            print(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {self.attempts}")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {', '.join(sorted(self.used_letters))}")
            letter = input("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: ").lower()
            if len(letter) != 1 or not letter.isalpha():
                print("–≠–¢–û –ù–ï 1 –ë–£–ö–í–ê!!! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É.")
                continue
            if letter in self.used_letters:
                print("–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç—É –±—É–∫–≤—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
                continue
            self.used_letters.add(letter)
            if letter in self.word:
                for i in range(len(self.word)):
                    if self.word[i] == letter:
                        self.guessed_word[i] = letter
                print("–í–µ—Ä–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É.")
            else:
                print("–ù–µ–≤–µ—Ä–Ω–æ! –¢–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç.")
                self.gallows.lose_life()
                self.attempts -= 1

        if "_" not in self.guessed_word:
            print(f"–ü–æ–±–µ–¥–∞! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {''.join(self.guessed_word)} üéâ")
        else:
            print(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: {self.word}.")


dict_words = [
    ['dog', 'elephant', 'rhinoceros', 'cat', 'lion', 'tiger', 'zebra', 'koala', 'panda'],
    ['apple', 'cabbage', 'asparagus', 'potato', 'carrot', 'tomato', 'broccoli', 'pumpkin', 'spinach'],
    ['banana', 'pear', 'orange', 'peach', 'grape', 'kiwi', 'mango', 'pomegranate', 'papaya'],
    ['car', 'bus', 'bicycle', 'scooter', 'motorcycle', 'trolleybus', 'helicopter', 'ship', 'submarine'],
    ['red', 'blue', 'green', 'yellow', 'orange', 'violet', 'turquoise', 'carmin', 'indigo']
]

game = HangmanGame(dict_words)
game.start_game()
